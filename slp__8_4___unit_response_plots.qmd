---
title: "Unit Response"
format: html
editor: visual
jupyter: python3
---

## Configuration

```{r, setup, include = FALSE}
knitr::opts_knit$set(root.dir = 'Z:/Layton/Sleep_083023')
```

```{r}
library(tidyverse)
library(magrittr)

#install.packages('devtools')
#install_github("jokergoo/ComplexHeatmap")
library(ComplexHeatmap)
library(ComplexUpset)
# library(gapmap)
# library(pheatmap)
# library(gplots)
library(circlize)
```

## Parameters

```{r}
heatmap_input_path <- 'Cache/Subject01/Feb02/S01_unit_heatmap_swa.csv'
barplot_input_path <- 'Cache/Subject01/Feb02/S01_unit_response.csv'

heatmap_output_path <- 'Results/S01_response_heatmap.svg'
barplot_output_path <- 'Results/S01_response_barplot.svg'
```

## Heat Map

```{r}
df <- read.csv(heatmap_input_path)
df <- df[df$unit_label != 'aINS',]

# Convert unit/chan ID's to ROI's
unit_lookup <- df %>% distinct(unit, unit_label)
chan_lookup <- df %>% distinct(chan, chan_label)

# Create the matrix
mat <-
  df %>%
  pivot_wider(id_cols = c(unit),
              names_from = chan,
              values_from = rho) %>%
  column_to_rownames(var = "unit") %>%
  as.matrix()

# Set row and column names of the matrix to unit_label and chan_label
rownames(mat) <- unit_lookup$unit_label[match(rownames(mat), unit_lookup$unit)]
colnames(mat) <- chan_lookup$chan_label[match(colnames(mat), chan_lookup$chan)]

# Order columns based on chan_label
ordered_cols <- order(chan_lookup$chan_label)
mat <- mat[, ordered_cols]
colnames(mat) <- chan_lookup$chan_label[ordered_cols]

# Set heatmap annotations
row_anno = ComplexHeatmap::rowAnnotation(Unit = row.names(mat), 
                         col = list(Unit = c('CLA' = '#E28DB8', 
                                             'ACC' = '#A67A77', 
                                             'AMY' = '#7BA387', 
                                             'aINS' = '#92a8d1')))

color_map <- colorRamp2(c(-1, 0, 1), c('#6A89D4', 'white', '#D46A6A'))

# Plot heatmap
heatmap <- ComplexHeatmap::Heatmap(mat,
                                   name = 'Spearman Rho',
                                   col = color_map,
                                   cluster_rows = TRUE,
                                   cluster_columns = FALSE,
                                   row_dend_reorder = TRUE,
                                   column_dend_reorder = FALSE,
                                   show_row_dend = FALSE,
                                   show_column_dend = TRUE,
                                   column_names_rot = 45,
                                   right_annotation = row_anno)

svg(heatmap_output_path, width = 10, height = 10)
draw(heatmap)
dev.off()
```

## Bar Plot

```{r}
dbar <- 
  read.csv(barplot_input_path) %>%
  mutate(response_type = as.factor(response_type),
         region = as.factor(unit_roi)) %>%
  mutate(response_type = fct_relevel(response_type, 
                                     'Positive', 'None', 'Negative'),
         region = fct_relevel(region, 'R CLA', 'L CLA', 
                                      'R ACC', 'L ACC', 
                                      'R AMY', 'L AMY'))
```

```{r}
ggplot(dbar, aes(x = region, fill = response_type)) + 
    geom_bar() + 
    scale_fill_manual(values = c('#D46A6A', 'gray', '#6A89D4')) +
    theme_minimal() + 
    theme(legend.title = element_blank(),
          legend.text = element_text(size = 16),
          axis.title = element_blank(),
          axis.text.x = element_text(size = 16, angle = 45, vjust = 1, hjust = 1),
          axis.text.y = element_text(size = 14),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          panel.border = element_rect(colour = 'black', 
                                      fill = NA, 
                                      size = 1))

ggsave(file = barplot_output_path, width = 6, height = 5, 
       dpi = 300, limitsize = FALSE)
```
