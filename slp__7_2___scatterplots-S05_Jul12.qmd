---
title: "Firing Rate Scatterplots"
format: html
editor: visual
jupyter: python3
---

## Configuration

```{r, setup, include = FALSE}
knitr::opts_knit$set(root.dir = 'Z:/Layton/Sleep_083023')
```

```{r}
library(tidyverse)
library(ggh4x)
library(ggExtra)
library(zoo)
library(tune)
library(gghighlight)
```

## Parameters

```{r}
long_scatter_path <- 'Cache/Subject05/Jul12/long_scatter.csv'
short_scatter_path <- 'Cache/Subject05/Jul12/short_scatter.csv'
stage_single_out_path <- 'Results/S05_Jul12_FR_stage_single.svg'
sws_single_out_path <- 'Results/S05_Jul12_FR_SWS_single.svg'
swa_single_out_path <- 'Results/S05_Jul12_FR_SWA_single.svg'
beta_single_out_path <- 'Results/S05_Jul12_FR_Beta_single.svg'
micro_regions <- c('CLA', 'ACC', 'AMY')
micro_colors <- c('#E28DB8', '#A67A77', '#7BA387')
#micro_colors <- c('#e8a2c5', '#805553', '#7da58a')
```

## Munging

```{r}
stage_data <- 
  read.csv(long_scatter_path) %>% 
  mutate(unit_region = as.factor(unit_region)) %>%
  mutate(unit_region = fct_relevel(unit_region, micro_regions)) %>%
  mutate(stage = ifelse(stage == 1, 'n23', 'not_n23')) %>%
  group_by(unit_id, unit_region, stage) %>%
  summarize(FR = mean(fr),
            logFR = log2(mean(fr)),
            zFR = mean(fr_zscore)) %>%
  pivot_wider(id_cols = c(unit_id, unit_region),
              names_from = c(stage),
              values_from = c(logFR))
```

```{r}
sws_data <- 
  read.csv(short_scatter_path) %>% 
  mutate(unit_region = as.factor(unit_region)) %>%
  mutate(unit_region = fct_relevel(unit_region, micro_regions)) %>%
  #mutate(SWS = ifelse(sws >= 0.15, 'SWS', 'noSWS')) %>%
  mutate(SWS = case_when(sws >= mean(sws) ~ 'SWS',
                          sws == 0 ~ 'noSWS',
                          TRUE ~ 'midSWS')) %>% 
  group_by(unit_id, unit_region, SWS) %>%
  summarize(FR = mean(fr),
            logFR = log2(mean(fr)),
            zFR = mean(fr_zscore)) %>%
  pivot_wider(id_cols = c(unit_id, unit_region),
              names_from = c(SWS),
              values_from = c(logFR))
```

```{r}
swa_data <- 
  read.csv(short_scatter_path) %>% 
  mutate(unit_region = as.factor(unit_region)) %>%
  mutate(unit_region = fct_relevel(unit_region, micro_regions)) %>%
  #mutate(SWA = ifelse(swa_zscore >= 0, 'SWA', 'noSWA')) %>%
  mutate(SWA = case_when(swa_zscore >= quantile(swa_zscore)[4] ~ 'SWA',
                         swa_zscore <= quantile(swa_zscore)[2] ~ 'noSWA',
                         TRUE ~ 'midSWA')) %>% 
  group_by(unit_id, unit_region, SWA) %>%
  summarize(FR = mean(fr),
            logFR = log2(mean(fr)),
            zFR = mean(fr_zscore)) %>%
  pivot_wider(id_cols = c(unit_id, unit_region),
              names_from = c(SWA),
              values_from = c(logFR))
```

```{r}
beta_data <- 
  read.csv(short_scatter_path) %>% 
  mutate(unit_region = as.factor(unit_region)) %>%
  mutate(unit_region = fct_relevel(unit_region, micro_regions)) %>%
  #mutate(Beta = ifelse(beta_zscore >= 0, 'hiB', 'loB')) %>%
  mutate(Beta = case_when(beta_zscore >= quantile(beta_zscore)[4] ~ 'hiB',
                          beta_zscore <= quantile(beta_zscore)[2] ~ 'loB',
                          TRUE ~ 'midB')) %>% 
  group_by(unit_id, unit_region, Beta) %>%
  summarize(FR = mean(fr),
            logFR = log2(mean(fr)),
            zFR = mean(fr_zscore)) %>%
  pivot_wider(id_cols = c(unit_id, unit_region),
              names_from = c(Beta),
              values_from = c(logFR))
```

## Sleep Stage Plot

```{r}
stage_plot <- 
  ggplot(data = stage_data, 
         aes(x = n23, 
             y = not_n23,
         group = unit_region,
         color = unit_region)) +
  geom_abline(slope = 1, 
              intercept = 0,
              linetype = 'dashed') + 
  geom_point(size = 1.75) +
  #facet_wrap(. ~ unit_region) +
  scale_discrete_manual(values = micro_colors,
                        aesthetics = c('color')) + 
  #scale_x_continuous(expand = c(0, 0)) +
  #scale_y_continuous(expand = c(0, 0)) +
  coord_obs_pred() + 
  labs(x = 'FR (log2 Hz) when N2/N3', 
       y = 'FR (log2 Hz) when not N2/N3') +
  guides(colour = guide_legend(override.aes = list(size = 4))) + 
  theme_minimal() + 
  theme(#legend.position = 'bottom',
        legend.position = 'none',
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 10),
        axis.ticks = element_line(size = 0.4),
        strip.text = element_text(size = 8),
        legend.title = element_blank(),
        legend.text = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(colour = 'black', 
                                    fill = NA, 
                                    size = 1))

stage_plot <- ggMarginal(stage_plot, 
                         type = 'histogram',
                         groupColour = TRUE,
                         groupFill = TRUE)
```

```{r}
# # Two-way ANOVA
# stat_data <- 
#   stage_data %>%
#   pivot_longer(cols = -c(unit_id, unit_region), 
#                names_to = 'sleep_stage', 
#                values_to = 'FR')
# 
# summary(aov(FR ~ unit_region * sleep_stage, data = stat_data))
```

```{r}
stage_plot

ggsave(file = stage_single_out_path, 
       width = 4, height = 4, 
       dpi = 300, limitsize = FALSE)
```

## Single SWS Plot

```{r}
sws_plot <- 
  ggplot(data = sws_data, 
       aes(x = SWS,
           y = noSWS,
           color = unit_region)) + 
  geom_abline(slope = 1, 
              intercept = 0,
              linetype = 'dashed') + 
  geom_point(size = 1.75) +
  #facet_wrap(. ~ unit_region) +
  #scale_x_continuous(expand = c(0, 0)) +
  #scale_y_continuous(expand = c(0, 0)) +
  coord_obs_pred() + 
  scale_discrete_manual(values = micro_colors,
                        aesthetics = c('color')) + 
  labs(x = 'log2(FR) in High SW', 
       y = 'log2(FR) in Low SW',
       legend = 'Channel') +
  guides(colour = guide_legend(override.aes = list(size = 4))) + 
  theme_minimal() + 
  theme(#legend.position = 'bottom',
        legend.position = 'none',
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 10),
        axis.ticks = element_line(size = 0.4),
        strip.text = element_text(size = 14),
        legend.title = element_blank(),
        legend.text = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(colour = 'black', 
                                    fill = NA, 
                                    size = 1))

sws_plot <- ggMarginal(sws_plot, 
                       type = 'histogram',
                       groupColour = TRUE,
                       groupFill = TRUE)
```

```{r}
# # Two-way ANOVA
# stat_data <- 
#   sws_data %>%
#   pivot_longer(cols = -c(unit_id, unit_region), 
#                names_to = 'SWS', 
#                values_to = 'FR')
# 
# summary(aov(FR ~ unit_region * SWS, data = stat_data))
```

```{r}
sws_plot

ggsave(file = sws_single_out_path, 
       width = 4, height = 4, 
       dpi = 300, limitsize = FALSE)
```

## Single SWA Plot

```{r}
swa_plot <- ggplot(data = swa_data, 
       aes(x = SWA,
           y = noSWA,
           color = unit_region)) + 
  geom_abline(slope = 1, 
              intercept = 0,
              size = 0.5,
              linetype = 'dashed') + 
  geom_point(size = 1.75) + 
  #facet_wrap(. ~ unit_region) +
  #scale_x_continuous(expand = c(0, 0)) +
  #scale_y_continuous(expand = c(0, 0)) +
  coord_obs_pred() + 
  scale_discrete_manual(values = micro_colors,
                        aesthetics = c('color')) + 
  labs(x = 'log2(FR) in High SWA', 
       y = 'log2(FR) in Low SWA',
       legend = 'Channel') +
  guides(colour = guide_legend(override.aes = list(size = 4))) + 
  theme_minimal() + 
  theme(#legend.position = 'bottom',
        legend.position = 'none',
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 10),
        axis.ticks = element_line(size = 0.4),
        strip.text = element_text(size = 14),
        legend.title = element_blank(),
        legend.text = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(colour = 'black', 
                                    fill = NA, 
                                    size = 1))

swa_plot <- ggMarginal(swa_plot, 
                       type = 'histogram',
                       groupColour = TRUE,
                       groupFill = TRUE)
```

```{r}
# # Two-way ANOVA
# stat_data <- 
#   swa_data %>%
#   pivot_longer(cols = -c(unit_id, unit_region), 
#                names_to = 'SWA', 
#                values_to = 'FR')
# 
# summary(aov(FR ~ unit_region * SWA, data = stat_data))
```

```{r}
swa_plot

ggsave(file = swa_single_out_path, 
       width = 4, height = 4, 
       dpi = 300, limitsize = FALSE)
```

## Single Beta Plot

```{r}
beta_plot <- 
  ggplot(data = beta_data, 
       aes(x = loB,
           y = hiB,
           color = unit_region)) + 
  geom_abline(slope = 1, 
              intercept = 0,
              linetype = 'dashed') + 
  geom_point(size = 1.75) +
  #facet_wrap(. ~ unit_region) +
  #scale_x_continuous(expand = c(0, 0)) +
  #scale_y_continuous(expand = c(0, 0)) +
  coord_obs_pred() + 
  scale_discrete_manual(values = micro_colors,
                        aesthetics = c('color')) + 
  labs(x = 'log2(FR) in Low Beta', 
       y = 'log2(FR) in High Beta',
       legend = 'Channel') +
  guides(colour = guide_legend(override.aes = list(size = 4))) + 
  theme_minimal() + 
  theme(#legend.position = 'bottom',
        legend.position = 'none',
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 10),
        axis.ticks = element_line(size = 0.4),
        strip.text = element_text(size = 14),
        legend.title = element_blank(),
        legend.text = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(colour = 'black', 
                                    fill = NA, 
                                    size = 1))

beta_plot <- ggMarginal(beta_plot, 
                        type = 'histogram',
                        groupColour = TRUE,
                        groupFill = TRUE)
```

```{r}
# # Two-way ANOVA
# stat_data <- 
#   beta_data %>%
#   pivot_longer(cols = -c(unit_id, unit_region), 
#                names_to = 'Beta', 
#                values_to = 'FR')
# 
# summary(aov(FR ~ unit_region * Beta, data = stat_data))
```

```{r}
beta_plot

ggsave(file = beta_single_out_path, 
       width = 4, height = 4, 
       dpi = 300, limitsize = FALSE)
```
