---
title: "Transition Plots"
format: html
editor: visual
jupyter: python3
---

## Configuration

```{r, setup, include = FALSE}
knitr::opts_knit$set(root.dir = 'G:/My Drive/Residency/Research/Lab - Damisah/Project - Sleep')
```

```{r}
library(tidyverse)
```

## Parameters

You will need to run this once for each zoom window (so twice per transition into sleep, named part1 and part2, respectively).

```{r}
swa_path <- 'Cache/Subject01/S01_swa_t5760.csv'
sw_path <- 'Cache/Subject01/S01_sw_t5760.csv'
spike_path <- 'Cache/Subject01/S01_spike_t5760.csv'

swa_rds_out <- 'Cache/Subject01/S01_swa_t5760_part1.RDS'
spike_rds_out <- 'Cache/Subject01/S01_spike_raster_t5760_part1.RDS'

#S01-1: 1920 +/- 340 (zoom 1700, 2140 +/- 15)
#S01-3: 4140 +/- 480 (zoom 3840, 4440 +/- 15)

#S01-Experiment: 5760 +/- 340 (zoom 5540, 5980 +/- 15), y_limits = c(-0.75, 0.75)
```

```{r}
# Specify the new, zoomed-in window
# (must be smaller than original window size)
tpoint = 5540
zoom_window = 15

# Specify channels for SWA time series plot
selected_channels <- c('RAI3', 'RAI2', 'RH7', 'RPI11')

# Unit selection
selected_laterality <- 'right'
selected_regions <- c('CLA', 'AMY')
```

## Munging

```{r}
sw <- read.csv(sw_path)

swa_scaling = 1000

swa <- 
  read.csv(swa_path) %>%
  filter(channel %in% selected_channels) %>%
  filter(seconds >= tpoint - zoom_window & 
         seconds <= tpoint + zoom_window) %>%
  # Merge with detected SW's and keep only one row per time
  merge(., sw, by.x = 'channel', by.y = 'channel_id') %>%
  mutate(sw_present = ifelse(seconds >= start & 
                             seconds <= end, 
                             1, 0)) %>%
  select(channel, seconds, amplitude, sw_present) %>%
  distinct() %>%
  group_by(channel, seconds, amplitude) %>%
  filter(sw_present == max(sw_present)) %>%
  ungroup() %>%
  mutate(sw_present = as.factor(sw_present)) %>%
  # Reformat channel
  mutate(channel = as.factor(channel)) %>%
  mutate(channel = fct_recode(channel, 
                              'PFC' = 'RAI3', 
                              'INS' = 'RAI2', 
                              'TPL' = 'RH7', 
                              'SPL' = 'RPI11')) %>%
  mutate(channel = fct_relevel(channel,
                               'SPL', 'TPL', 
                               'INS', 'PFC')) %>%
  # Modify amplitude with scaling factor
  mutate(amplitude = amplitude * 1e6) %>%
  mutate(value = amplitude + 
           (as.numeric(channel) * swa_scaling))

# Define breaks and labels
swa_breaks = 
  (as.numeric(unique(swa$channel))) * swa_scaling

swa_labels = unique(swa$channel)
```

```{r}
spikes <- 
  read.csv(spike_path) %>%
  # Select only right side and selected regions
  filter(unit_laterality == selected_laterality) %>%
  filter(unit_region %in% selected_regions) %>%
  # Reformat unit region
  mutate(unit_region = as.factor(unit_region)) %>%
  mutate(unit_region = fct_relevel(unit_region, 
                                   'CLA', 'AMY')) %>%
  # Cropping
  filter(seconds >= tpoint - zoom_window & 
         seconds <= tpoint + zoom_window) %>% 
  # Get spike count per neuron (for sorting)
  group_by(unit_id) %>% 
  mutate(spike_num = n()) %>% 
  ungroup()
```

## Raw Redlit Plot

```{r}
swa_plot <- 
  ggplot(swa, aes(x = seconds, y = value, 
                color = sw_present, group = channel)) + 
  geom_line() +
  scale_discrete_manual(values = c('black', 'red'),
                        aesthetics = c('color')) + 
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(breaks = swa_breaks,
                     labels = unique(swa$channel), 
                     minor_breaks = NULL) + 
  labs(y = 'SWA') +
  theme_minimal() + 
  theme(legend.position = 'None',
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 11),
        axis.text.x = element_blank(),
        axis.text.y = element_text(size = 7),
        axis.ticks.x = element_blank(),
        axis.ticks.y = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(colour = 'black', 
                                    fill = NA, 
                                    size = 1))

swa_plot
```

```{r}
# Save as RDS object for later alignment
saveRDS(swa_plot, file = swa_rds_out) 
```

## Spike raster plot

```{r}
spike_plot <- 
  ggplot(spikes, 
         aes(x = seconds,
             y = reorder(unit_id, spike_num),
             fill = unit_region)) +
  geom_point(shape = 15, size = 0.15) + 
  facet_grid(unit_region ~ .,
             scales = 'free',
             space = 'free', # 'fixed'
             switch = 'y') + 
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_discrete(expand = c(0, 0)) +
  theme_minimal() +
  theme(legend.position = 'None',
        strip.text.x = element_text(size = 11),
        axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.x = element_blank(),
        axis.ticks.y = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(colour = 'black',
                                    fill = NA,
                                    size = 1))

spike_plot
```

```{r}
# Save as RDS object for later alignment
saveRDS(spike_plot, file = spike_rds_out)
```
