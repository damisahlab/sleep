---
title: "Transition Plots"
format: html
editor: visual
jupyter: python3
---

## Configuration

```{r, setup, include = FALSE}
knitr::opts_knit$set(root.dir = 'G:/My Drive/Residency/Research/Lab - Damisah/Project - Sleep')
```

```{r}
library(tidyverse)
library(zoo)
library(viridis)
```

## Parameters

```{r}
spectro_path <- 'Cache/Subject01/S01_spectro_t5715.csv'
spike_path <- 'Cache/Subject01/S01_spike_t5715.csv'

spectro_rds_out <- 'Cache/Subject01/S01_spectro_t5715.RDS'
spike_rds_out <- 'Cache/Subject01/S01_zspike_t5715.RDS'

#S01-2: 3680 +/- 480 (zoom +/- 60), y_limits = c(-0.75, 0.75)
#S01-4: 5715 +/- 180 (zoom +/- 30), y_limits = c(-0.75, 0.75)
```

```{r}
# Specify transition point and window
# size in order to calculate FR bins
tpoint = 5715
window = 480

# Specify zoom window size in order
# to draw indicator lines on plots
zoom_window = 30

# Spectrogram parameters
spectro_channel = 'ROF1' # 'C4'
scale_min <- -10
scale_max <- 2

# zFR parameters
y_limits = c(-0.75, 0.75)

selected_laterality <- 'right'
selected_regions <- c('CLA', 'AMY')
```

## Munging

```{r}
# We need the original crop times to 
# appropriately calculate bin limits
tmin = tpoint - window
tmax = tpoint + window

# A bin width of 1 sec = units of Hz
# (do NOT change this, or the minutes
#  variable will get messed up)
bin_width = 1 # second

# Spikes
spikes <- 
  read.csv(spike_path) %>%
  # Select only right side and selected regions
  filter(unit_laterality == selected_laterality) %>%
  filter(unit_region %in% selected_regions) %>%
  # Reformat unit region
  mutate(unit_region = as.factor(unit_region)) %>%
  mutate(unit_region = fct_relevel(unit_region, 
                                   'CLA', 'AMY')) %>%
  # Bin spikes for FR calculations
  mutate(time_bin = cut(seconds, 
                        breaks = seq(from = tmin, 
                                     to = tmax, 
                                     by = bin_width))) %>%
  group_by(unit_region, unit_id, time_bin) %>%
  # Drop false is critical to retrieve empty
  # bins from the bin factor levels for proper
  # calculation of the normalized firing rate
  count(time_bin, .drop = FALSE) %>%
  ungroup() %>%
  mutate(time_bin = as.numeric(time_bin)) %>%
  group_by(unit_region, unit_id) %>%
  mutate(mean = mean(n),
         sd = sd(n)) %>%
  mutate(zFR = (n - mean) / sd) %>%
  ungroup() %>%
  # Calculate mean/SE of zFR across units
  group_by(unit_region, time_bin) %>%
  summarize(value = mean(zFR),
            sd = sd(zFR),
            ct = n()) %>%
  mutate(se = sd / sqrt(ct)) %>%
  select(unit_region, time_bin, value, se) %>%
  # Smooth
  mutate(value = rollmean(value, k = 10, fill = NA),
         se = rollmean(se, k = 10, fill = NA)) %>%
  # Calculate minutes parameter (for x-axis labels)
  mutate(minutes = (time_bin + tpoint - window) / 60)
```

## Spectrogram

```{r}
spectro <- 
  read.csv(spectro_path) %>%
  filter(channel == spectro_channel)

#scale_min <- quantile(spectro$logmpower_freq, probs = c(0.10))
#scale_max <- quantile(spectro$logmpower_freq, probs = c(0.90))

spectro_plot <- 
  ggplot(spectro, 
         aes(x = seconds, y = frequency)) +
  geom_raster(aes(fill = logmpower_freq),
              alpha = 1.0,
              interpolate = TRUE) + 
  geom_vline(xintercept = tpoint - zoom_window,
             linetype = 'solid', 
             color = 'red',
             size = 0.50) +
  geom_vline(xintercept = tpoint + zoom_window,
             linetype = 'solid', 
             color = 'red',
             size = 0.50) +
  #scale_fill_viridis(option = 'magma',
  #                   limit = c(scale_min, scale_max),
  #                   oob = scales::squish) +
  scale_fill_gradientn(colors = c('blue', 'white', 'red'),
                       limit = c(scale_min, scale_max),
                       oob = scales::squish) +
  #scale_fill_gradientn(colors = c('white', 'black'),
  #                     limit = c(scale_min, scale_max),
  #                     oob = scales::squish) + 
  #scale_fill_gradientn(colors = c('#4a72af', '#7cb7b1', '#dfe176'),
  #                     limit = c(scale_min, scale_max),
  #                     oob = scales::squish) + 
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(breaks = c(5, 10, 15, 20),
                     expand = c(0, 0)) +
  labs(y = 'Scalp', fill = 'Log Power (dB)') +
  theme_minimal() + 
  theme(legend.text = element_text(size = 10),
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 11),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.ticks.y = element_line(size = 0.3),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(colour = 'black', 
                                    fill = NA, 
                                    size = 1))

spectro_plot
```

```{r}
# Save as RDS object for later alignment
saveRDS(spectro_plot, file = spectro_rds_out) 
```

## zFR plot

```{r}
zspike_plot <- 
  ggplot(spikes, 
         aes(x = minutes,
             y = value,
             color = unit_region,
             fill = unit_region)) +
  geom_hline(yintercept = 0,
             linetype = 'dashed',
             color = 'black',
             size = 0.25) + 
  geom_line() + 
  geom_ribbon(aes(ymin = value - se, 
                  ymax = value + se),
              color = NA,
              alpha = 0.3) + 
  scale_discrete_manual(values = c('#e8a2c5', '#7da58a'),
                        aesthetics = c('color', 'fill')) + 
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_discrete(expand = c(0, 0)) +
  coord_cartesian(ylim = y_limits) + 
  labs(y = 'zFR') +
  theme_minimal() + 
  theme(axis.title.x = element_blank(),
        axis.title.y = element_text(size = 11),
        #axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        #axis.ticks.x = element_blank(),
        axis.ticks.y = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(colour = 'black', 
                                    fill = NA, 
                                    size = 1))

zspike_plot
```

```{r}
# Save as RDS object for later alignment
saveRDS(zspike_plot, file = spike_rds_out) 
```
