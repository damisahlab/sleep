---
title: "UMAP"
format: html
editor: visual
jupyter: python3
---

## Configuration

```{r, setup, include = FALSE}
knitr::opts_knit$set(root.dir = 'Z:/Layton/Sleep_083023')
```

```{r}
library(tidyverse)
library(umap)
#library(dbscan)
library(ggforce)
library(gatepoints)
```

## Parameters

```{r}
spike_epoch_path <- 'Cache/Subject05/Jul11/S05_spike_epochs_10s.csv'
sw_corr_path <- 'Cache/Subject05/Jul11/S05_sw_correlation_10s.csv'
swa_corr_path <- 'Cache/Subject05/Jul11/S05_swa_correlation_10s.csv'
umap_groups_path <- 'Cache/Subject05/Jul11/S05_UMAP_Groups_10s.csv'

spike_plot_path <- 'Results/S05_Jul11_UMAP_spike_10s_epochs.svg'
sw_plot_path <- 'Results/S05_Jul11_UMAP_sw_10s_epochs.svg'
swa_plot_path <- 'Results/S05_Jul11_UMAP_swa_10s_epochs.svg'

unit_regions <- c('CLA', 'ACC', 'AMY')
unit_colors <- c('#E28DB8', '#A67A77', '#7BA387')
```

```{r}
# Make UMAP reproducible (it is stochastic)
set.seed(18)

# # HDBSCAN parameters
# min_pts = 5

# Define Gatepoints function
# Gatepoints will only work with the base plot() function
gate <- function(df){
  require(gatepoints)
  X11()
  plot(df)
  rownames_out <- fhs(df)
  rownames_out
  }
```

## Munging

```{r}
spike_data <- 
  read.csv(spike_epoch_path) %>%
  filter(unit_region %in% unit_regions) %>%
  group_by(unit_id) %>%
  mutate(norm_fr = scale(fr, 
                         center = TRUE, 
                         scale = TRUE)) %>%
  ungroup() %>%
  pivot_wider(id_cols = c(unit_id, unit_laterality, unit_region),
              names_from = epoch,
              values_from = norm_fr)

spike_meta <- 
  spike_data %>%
  select(unit_id, unit_laterality, unit_region) %>%
  rownames_to_column('id') %>%
  mutate(id = as.numeric(id))

spike_data <- spike_data[,-c(1:3)]
```

```{r}
sw_data <- 
  read.csv(sw_corr_path) %>%
  filter(unit_region %in% unit_regions) %>%
  select(unit_id, unit_region, unit_laterality, channel, rho) %>%
  mutate(corr = scale(rho, center = TRUE, scale = TRUE)) %>%
  pivot_wider(id_cols = c(unit_id, unit_region, unit_laterality),
              names_from = channel,
              values_from = corr)

mean_cols <- colnames(sw_data)[!colnames(sw_data) %in% c("unit_id", "unit_laterality", "unit_region")]

sw_meta <- 
  sw_data %>%
  mutate(corr_mean = round(rowMeans(sw_data[,mean_cols]), digits = 2)) %>%
  select(unit_id, unit_laterality, unit_region, corr_mean) %>%
  rownames_to_column('id') %>%
  mutate(id = as.numeric(id))

sw_data <- sw_data[,-c(1:3)]
```

```{r}
swa_data <- 
  read.csv(swa_corr_path) %>%
  filter(unit_region %in% unit_regions) %>%
  select(unit_id, unit_region, unit_laterality, channel, rho) %>%
  mutate(corr = scale(rho, center = TRUE, scale = TRUE)) %>%
  pivot_wider(id_cols = c(unit_id, unit_region, unit_laterality),
              names_from = channel,
              values_from = corr)

mean_cols <- colnames(swa_data)[!colnames(swa_data) %in% c("unit_id", "unit_laterality", "unit_region")]

swa_meta <- 
  swa_data %>%
  mutate(corr_mean = round(rowMeans(swa_data[,mean_cols]), digits = 2)) %>%
  select(unit_id, unit_laterality, unit_region, corr_mean) %>%
  rownames_to_column('id') %>%
  mutate(id = as.numeric(id))

swa_data <- swa_data[,-c(1:3)]
```

## UMAP

```{r}
# UMAP parameters (optional)
custom <- umap.defaults
custom$n_components = 2
```

```{r}
# UMAP
map <- umap(spike_data, config = custom)

# # HDBSCAN
# spike_cluster <- hdbscan(map$layout, minPts = min_pts)$cluster
# spike_cluster <- as.data.frame(spike_cluster)
# colnames(spike_cluster) <- c('cluster')
# spike_cluster <- 
#   spike_cluster %>%
#   rownames_to_column('id') %>%
#   mutate(id = as.numeric(id))

# Format & merge with meta-data
spike_map <- 
  map$layout %>%
  as.data.frame() %>%
  rename(UMAP1 = 'V1',
         UMAP2 = 'V2') %>%
  rownames_to_column('id') %>%
  mutate(id = as.numeric(id)) %>%
  inner_join(spike_meta, by = 'id') %>%
  #inner_join(spike_cluster, by = 'id') %>%
  mutate(unit_region = factor(unit_region, levels = unit_regions))
```

```{r}
# UMAP
map <- umap(sw_data)

# # HDBSCAN
# sw_cluster <- hdbscan(map$layout, minPts = min_pts)$cluster
# sw_cluster <- as.data.frame(sw_cluster)
# colnames(sw_cluster) <- c('cluster')
# sw_cluster <- 
#   sw_cluster %>%
#   rownames_to_column('id') %>%
#   mutate(id = as.numeric(id))

# Format & merge with meta-data
sw_map <- 
  map$layout %>%
  as.data.frame() %>%
  rename(UMAP1 = 'V1',
         UMAP2 = 'V2') %>%
  rownames_to_column('id') %>%
  mutate(id = as.numeric(id)) %>%
  inner_join(sw_meta, by = 'id') %>%
  #inner_join(sw_cluster, by = 'id') %>%
  mutate(unit_region = factor(unit_region, levels = unit_regions))
```

```{r}
# UMAP
map <- umap(swa_data)

# # HDBSCAN
# swa_cluster <- hdbscan(map$layout, minPts = min_pts)$cluster
# swa_cluster <- as.data.frame(swa_cluster)
# colnames(swa_cluster) <- c('cluster')
# swa_cluster <- 
#   swa_cluster %>%
#   rownames_to_column('id') %>%
#   mutate(id = as.numeric(id))

# Format & merge with meta-data
swa_map <- 
  map$layout %>%
  as.data.frame() %>%
  rename(UMAP1 = 'V1',
         UMAP2 = 'V2') %>%
  rownames_to_column('id') %>%
  mutate(id = as.numeric(id)) %>%
  inner_join(swa_meta, by = 'id') %>%
  #inner_join(swa_cluster, by = 'id') %>%
  mutate(unit_region = factor(unit_region, levels = unit_regions))
```

## Gatepoints

```{r}
# Free-hand Gating:
# > Left click to select points
# > Right click to close the loop 
# > Be sure to take a screenshot of your gate!
# i.e. gate(pc_scores[,.(PC1.pos, PC1.neg)])

spike_cluster <- gate(spike_map[,c('UMAP1', 'UMAP2')])
gated_units <- spike_map[as.numeric(spike_cluster), 'unit_id']

# Propagate the manual group to the dataframes
spike_map <- 
  spike_map %>%
  mutate(gate = ifelse(unit_id %in% gated_units, 'triangle', 'square'))

sw_map <- 
  sw_map %>%
  mutate(gate = ifelse(unit_id %in% gated_units, 'triangle', 'square'))

swa_map <- 
  swa_map %>%
  mutate(gate = ifelse(unit_id %in% gated_units, 'triangle', 'square'))
```

## Export HDBSCAN groups

```{r}
# # Reformat to prepare for merging
# spike_groups <- spike_map[,c('unit_id', 'cluster')]
# colnames(spike_groups) <- c('unit_id', 'spike_cluster')
# 
# swa_groups <- swa_map[,c('unit_id', 'cluster')]
# colnames(swa_groups) <- c('unit_id', 'swa_cluster')
# 
# sw_groups <- sw_map[,c('unit_id', 'cluster')]
# colnames(sw_groups) <- c('unit_id', 'sw_cluster')
# 
# # Merge groups and export
# umap_groups <- merge(spike_groups, swa_groups, by = 'unit_id')
# umap_groups <- merge(umap_groups, sw_groups, by = 'unit_id')
# 
# write.csv(umap_groups, umap_groups_path, row.names = FALSE)
```

## Spike Plot

```{r}
spike_plot <- 
  ggplot(data = spike_map,
       aes(x = UMAP1, 
           y = UMAP2,
           color = unit_region)) +
  geom_point(size = 5) + 
  ggforce::geom_mark_hull(aes(group = gate),
                          color = NA,
                          fill = 'gray75',
                          concavity = 10) + 
  scale_discrete_manual(values = unit_colors,
                        aesthetics = c('color')) + 
  theme_bw() +
  theme(legend.position = 'none',
        legend.title = element_blank(),
        legend.text = element_text(size = 16),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())
```

```{r}
spike_plot

ggsave(file = spike_plot_path, 
       width = 4.5, height = 4, 
       dpi = 300, limitsize = FALSE,
       bg = 'transparent')
```

## SW Plot

```{r}
sw_plot <- 
  ggplot(data = sw_map,
       aes(x = UMAP1, 
           y = UMAP2,
           color = unit_region)) +
  geom_point(size = 5, 
             aes(shape = gate, alpha = sw_meta$corr_mean)) + 
  scale_shape_manual(values = c('square' = 15, 'triangle' = 17)) + 
  #ggforce::geom_mark_hull(aes(group = cluster), 
  #                        color = 'gray50',
  #                        concavity = 10) + 
  scale_discrete_manual(values = unit_colors,
                        aesthetics = c('color')) + 
  theme_bw() +
  theme(legend.position = 'none',
        legend.title = element_blank(),
        legend.text = element_text(size = 16),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())
```

```{r}
sw_plot

ggsave(file = sw_plot_path, 
       width = 4.5, height = 4, 
       dpi = 300, limitsize = FALSE,
       bg = 'transparent')
```

## SWA Plot

```{r}
swa_plot <- 
  ggplot(data = swa_map,
       aes(x = UMAP1, 
           y = UMAP2,
           color = unit_region)) +
  geom_point(size = 5, 
             aes(shape = gate, alpha = sw_meta$corr_mean)) + 
  scale_shape_manual(values = c('square' = 15, 'triangle' = 17)) + 
  #ggforce::geom_mark_hull(aes(group = cluster), 
  #                        color = 'gray50',
  #                        concavity = 10) + 
  scale_discrete_manual(values = unit_colors,
                        aesthetics = c('color')) + 
  theme_bw() +
  theme(legend.position = 'none',
        legend.title = element_blank(),
        legend.text = element_text(size = 16),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())
```

```{r}
swa_plot

ggsave(file = swa_plot_path, 
       width = 4.5, height = 4, 
       dpi = 300, limitsize = FALSE,
       bg = 'transparent')
```
