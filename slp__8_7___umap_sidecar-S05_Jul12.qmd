---
title: "UMAP"
format: html
editor: visual
jupyter: python3
---

## Configuration

```{r, setup, include = FALSE}
knitr::opts_knit$set(root.dir = 'Z:/Layton/Sleep_083023')
```

```{r}
library(tidyverse)
library(umap)
library(gatepoints)
library(grid) 
library(gridExtra)
library(cowplot)
```

## Parameters

```{r}
spike_epoch_path <- 'Cache/Subject05/Jul12/S05_spike_epochs_10s.csv'
swa_epoch_path <- 'Cache/Subject05/Jul12/S05_sw_epochs_10s.csv'
dictionary_path <- 'Cache/Subject05/S05_electrodes.csv'

unit_regions <- c('CLA', 'ACC', 'AMY')
output_path <- "Results/S05_Jul12_gated_timelines.svg"
```

```{r}
# Make UMAP reproducible (it is stochastic)
set.seed(18)

# Define Gatepoints function
# Gatepoints will only work with the base plot() function
gate <- function(df){
  require(gatepoints)
  X11()
  plot(df)
  rownames_out <- fhs(df)
  rownames_out
  }
```

## SWA Munging and Plotting

```{r}
dict <- read.csv(dictionary_path) %>%
  select(elec_label, lobe_1)

# Average SWA by lobe, then
# average lobes into global
swa <- 
  read.csv(swa_epoch_path) %>%
  select(epoch, channel, zlog_power) %>%
  merge(dict, by.x = 'channel', by.y = 'elec_label') %>%
  group_by(epoch, lobe_1) %>%
  summarise(power = mean(zlog_power, na.rm = TRUE)) %>%
  ungroup() %>% 
  group_by(epoch) %>%
  summarise(power = mean(power))

# Apply Gaussian kernel smoothing
swa <- ksmooth(swa$epoch, swa$power, 
                    kernel = 'normal', bandwidth = 10)
swa <- data.frame(time = swa$x, power = swa$y)
```

```{r}
p_swa <- 
  ggplot(swa, aes(x = time, y = power)) +
  geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf),
            fill = '#D2DDEE', alpha = 0.05, inherit.aes = FALSE) +
  geom_hline(aes(yintercept = 0), 
             color = 'gray50', linetype = 'dotted', size = 0.25) + 
  geom_line(color = '#335289', size = 1) +  
  scale_x_continuous(expand = c(0, 0)) + 
  labs(y = 'Global SWA') +
  theme_minimal() + 
  theme(legend.title = element_blank(),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(colour = 'black', 
                                    fill = NA, 
                                    size = 1))

p_swa
```

## Spike Munging and UMAP

```{r}
spike_data <- 
  read.csv(spike_epoch_path) %>%
  filter(unit_region %in% unit_regions) %>%
  group_by(unit_id) %>%
  mutate(norm_fr = scale(fr, 
                         center = TRUE, 
                         scale = TRUE)) %>%
  ungroup() %>%
  pivot_wider(id_cols = c(unit_id, unit_laterality, unit_region),
              names_from = epoch,
              values_from = norm_fr)

spike_meta <- 
  spike_data %>%
  select(unit_id, unit_laterality, unit_region) %>%
  rownames_to_column('id') %>%
  mutate(id = as.numeric(id))

spike_data <- spike_data[,-c(1:3)]
```

```{r}
# UMAP parameters (optional)
custom <- umap.defaults
custom$n_components = 2

# UMAP
map <- umap(spike_data, config = custom)

# Format & merge with meta-data
spike_map <- 
  map$layout %>%
  as.data.frame() %>%
  rename(UMAP1 = 'V1',
         UMAP2 = 'V2') %>%
  rownames_to_column('id') %>%
  mutate(id = as.numeric(id)) %>%
  inner_join(spike_meta, by = 'id') %>%
  mutate(unit_region = factor(unit_region, levels = unit_regions))
```

## Gate and Plot: First Group

```{r}
# Free-hand Gating:
# > Left click to select points
# > Right click to close the loop 
# > Be sure to take a screenshot of your gate!
# i.e. gate(pc_scores[,.(PC1.pos, PC1.neg)])

zoom_row_names <- gate(spike_map[,c('UMAP1', 'UMAP2')])

# ...in order to make this work with ggplot2 instead of base plot()...
# https://stackoverflow.com/questions/9450873/locator-equivalent-in-ggplot2-for-maps
```

```{r}
gated_id <- spike_map[as.numeric(zoom_row_names), 'unit_id']
gated_df <- spike_data[as.numeric(zoom_row_names),]

gated_df <- 
  gated_df %>%
  pivot_longer(cols = everything(), 
               names_to = 'time', 
               values_to = 'fr') %>%
  group_by(time) %>%
  summarise(fr = mean(fr, na.rm = TRUE)) %>%
  ungroup() %>%
  mutate(time = as.numeric(time))

# Apply Gaussian kernel smoothing
gated_df <- ksmooth(gated_df$time, gated_df$fr, 
                    kernel = 'normal', bandwidth = 10)
gated_df <- data.frame(time = gated_df$x, fr = gated_df$y)
```

```{r}
p_fg <- 
  ggplot(gated_df, aes(x = time, y = fr)) +
  geom_hline(aes(yintercept = 0), 
             color = 'gray50', linetype = 'dotted', size = 0.25) + 
  geom_line(color = 'gray50', size = 1) + 
  scale_x_continuous(expand = c(0, 0)) + 
  labs(y = 'FR') +
  theme_minimal() + 
  theme(legend.title = element_blank(),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(colour = 'black', 
                                    fill = NA, 
                                    size = 1))

p_fg
```

## Gate and Plot: Second Group

```{r}
# Free-hand Gating:
# > Left click to select points
# > Right click to close the loop 
# > Be sure to take a screenshot of your gate!
# i.e. gate(pc_scores[,.(PC1.pos, PC1.neg)])

zoom_row_names <- gate(spike_map[,c('UMAP1', 'UMAP2')])

# …in order to make this work with ggplot2 instead of base plot()…
# https://stackoverflow.com/questions/9450873/locator-equivalent-in-ggplot2-for-maps
```

```{r}
gated_id <- spike_map[as.numeric(zoom_row_names), 'unit_id']
gated_df <- spike_data[as.numeric(zoom_row_names),]

gated_df <- 
  gated_df %>%
  pivot_longer(cols = everything(), 
               names_to = 'time', 
               values_to = 'fr') %>%
  group_by(time) %>%
  summarise(fr = mean(fr, na.rm = TRUE)) %>%
  ungroup() %>%
  mutate(time = as.numeric(time))

# Apply Gaussian kernel smoothing
gated_df <- ksmooth(gated_df$time, gated_df$fr, 
                    kernel = 'normal', bandwidth = 10)
gated_df <- data.frame(time = gated_df$x, fr = gated_df$y)
```

```{r}
p_sg <- 
  ggplot(gated_df, aes(x = time, y = fr)) +
  geom_hline(aes(yintercept = 0), 
             color = 'gray50', linetype = 'dotted', size = 0.25) + 
  geom_line(color = 'gray50', size = 1) + 
  scale_x_continuous(expand = c(0, 0)) + 
  labs(x = 'Time',
       y = 'FR') +
  theme_minimal() + 
  theme(legend.title = element_blank(),
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(colour = 'black', 
                                    fill = NA, 
                                    size = 1))

p_sg
```

## Combined Plot

```{r}
p_combined <- plot_grid(p_swa, p_fg, p_sg, 
                        ncol = 1, 
                        rel_heights = c(1, 1, 1.25), 
                        align = 'v')

ggsave(output_path, plot = p_combined, width = 5, height = 4, bg = 'white')
```
